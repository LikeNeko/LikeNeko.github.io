<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CocosCreater中iOS端调用js端报找不到方法的error</title>
    <url>/2021/11/29/Cocos%20Creater%20jsb%E8%B0%83%E7%94%A8%E6%89%BE%E4%B8%8D%E5%88%B0%E6%96%B9%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>错误示范</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">if</span> (cc.sys.isNative &amp;&amp; cc.sys.os == cc.sys.OS_IOS) &#123;</span><br><span class="line">    jsb.reflection.callStaticMethod(<span class="string">"ADVideo"</span>, <span class="string">"loadAdWithType:"</span>, <span class="string">"2"</span>);</span><br><span class="line">    <span class="comment">// ios端回调走这个方法，但报错，找不到that.tj2</span></span><br><span class="line">    cc.jsVideoDidClick2 = <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">        inter.tonji(<span class="number">2</span>, that, that.tj2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<a id="more"></a>




<blockquote>
<p>正确示范</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cc.sys.isNative &amp;&amp; cc.sys.os == cc.sys.OS_IOS) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    jsb.reflection.callStaticMethod(<span class="string">"ADVideo"</span>, <span class="string">"loadAdWithType:"</span>, <span class="string">"2"</span>);</span><br><span class="line">    <span class="comment">// ios端回调走这个方法，that得放在if里面</span></span><br><span class="line">    cc.jsVideoDidClick2 = <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">        inter.tonji(<span class="number">2</span>, that, that.tj2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Cocos Creater</tag>
      </tags>
  </entry>
  <entry>
    <title>php生成邀请码的方案</title>
    <url>/2020/04/20/Php%E7%94%9F%E6%88%90%E9%82%80%E8%AF%B7%E7%A0%81%E6%96%B9%E6%A1%88%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<p>总结一下创建一个邀请码的方案</p>
<a id="more"></a>



<blockquote>
<p>方案1</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">function createCode($userId)</span><br><span class="line">&#123;</span><br><span class="line">    static $sourceString &#x3D; [</span><br><span class="line">              0,1,2,3,4,5,6,7,8,9,10,</span><br><span class="line">              &#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,</span><br><span class="line">              &#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,</span><br><span class="line">              &#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,</span><br><span class="line">              &#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,</span><br><span class="line">              &#39;y&#39;,&#39;z&#39;</span><br><span class="line">            ];</span><br><span class="line"> </span><br><span class="line">    $num &#x3D; $userId;</span><br><span class="line">    $code &#x3D; &#39;&#39;;</span><br><span class="line">    while($num)</span><br><span class="line">    &#123;</span><br><span class="line">        $mod &#x3D; $num % 36;</span><br><span class="line">        $num &#x3D; (int)($num &#x2F; 36);</span><br><span class="line">        $code &#x3D; &quot;&#123;$sourceString[$mod]&#125;&#123;$code&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;判断code的长度</span><br><span class="line">    if( empty($code[4]))</span><br><span class="line">        str_pad($code,5,&#39;0&#39;,STR_PAD_LEFT);</span><br><span class="line"> </span><br><span class="line">    return $code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来自:<a href="https://blog.csdn.net/qq_33563706/java/article/details/51897558" target="_blank" rel="noopener">csdn的博客</a></p>
<blockquote>
<p>方案1的升级版</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static function encode($user_id) &#123;</span><br><span class="line"></span><br><span class="line">        static $source_string &#x3D; &#39;E5FCDG3HQA4B1NOPIJ2RSTUV67MWX89KLYZ&#39;;</span><br><span class="line"></span><br><span class="line">        $num &#x3D; $user_id;</span><br><span class="line"></span><br><span class="line">        $code &#x3D; &#39;&#39;;</span><br><span class="line"></span><br><span class="line">        while ( $num &gt; 0) &#123;</span><br><span class="line"></span><br><span class="line">            $mod &#x3D; $num % 35;</span><br><span class="line"></span><br><span class="line">            $num &#x3D; ($num - $mod) &#x2F; 35;</span><br><span class="line"></span><br><span class="line">            $code &#x3D; $source_string[$mod].$code;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(empty($code[3]))</span><br><span class="line"></span><br><span class="line">            $code &#x3D; str_pad($code,4,&#39;0&#39;,STR_PAD_LEFT);</span><br><span class="line"></span><br><span class="line">        return $code;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    static function decode($code) &#123;</span><br><span class="line"></span><br><span class="line">        static $source_string &#x3D; &#39;E5FCDG3HQA4B1NOPIJ2RSTUV67MWX89KLYZ&#39;;</span><br><span class="line"></span><br><span class="line">        if (strrpos($code, &#39;0&#39;) !&#x3D;&#x3D; false)</span><br><span class="line"></span><br><span class="line">            $code &#x3D; substr($code, strrpos($code, &#39;0&#39;)+1);</span><br><span class="line"></span><br><span class="line">        $len &#x3D; strlen($code);</span><br><span class="line"></span><br><span class="line">        $code &#x3D; strrev($code);</span><br><span class="line"></span><br><span class="line">        $num &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        for ($i&#x3D;0; $i &lt; $len; $i++) &#123;</span><br><span class="line"></span><br><span class="line">            $num +&#x3D; strpos($source_string, $code[$i]) * pow(35, $i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $num;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql中的Int(11)能不能用于存储手机号</title>
    <url>/2021/11/29/Mysql%E4%B8%AD%E7%9A%84Int(11)%E8%83%BD%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8%E6%89%8B%E6%9C%BA%E5%8F%B7/</url>
    <content><![CDATA[<blockquote>
<p>答案是不能</p>
</blockquote>
<p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-05-23-075754.png?x-oss-process=style/shuiyin" alt="47561590219909_.pic_hd"></p>
<p>从表里可以看出，int最小值和最大值</p>
<p>int(10)和int(11)其实没多大区别的，只是mysql存储的时候位数不足10的时候给你在前面补个0。</p>
<p><a href="https://www.cnblogs.com/funsion/p/4093816.html" target="_blank" rel="noopener">参考</a></p>
]]></content>
  </entry>
  <entry>
    <title>cocosjs 与ios交互的知识点</title>
    <url>/2021/11/29/cocos%20js%20%E4%B8%8EiOS%20%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h2 id="拉起穿山甲"><a href="#拉起穿山甲" class="headerlink" title="拉起穿山甲"></a>拉起穿山甲</h2><p>普通的.h,.m文件是不行能交互到cocos的sdk的。</p>
<p>涉及到 .m和.mm的区别。</p>
<p><code>.m</code> 文件是纯 <code>Object-C</code> 文件<br> <code>.mm</code> 是 <code>Object-C</code> 和 <code>C++</code> 混合文件；</p>
<p><code>.m</code>只能调用纯 <code>Object-C</code> 的类，不能调用混合的</p>
<p> <code>.mm</code> 可以调用 <code>Object-C</code> 的，也可以调用 <code>C++</code> 的；</p>
<h2 id="m-要调用混合的怎么办？"><a href="#m-要调用混合的怎么办？" class="headerlink" title=".m 要调用混合的怎么办？"></a>.m 要调用混合的怎么办？</h2><p> 可以解决办法是 <code>.h</code> 用 <code>Object-C</code> 的方式，而具体实现用 <code>.mm</code> 的方式；</p>
<p>解释一下，就是在.mm文件里你可以用oc的语法也可以用c++的语法</p>
]]></content>
      <tags>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 里laravel 框架composer报错 kill</title>
    <url>/2021/11/29/Docker%20%E9%87%8Claravel%20%E6%A1%86%E6%9E%B6composer%E6%8A%A5%E9%94%99%20kill/</url>
    <content><![CDATA[<hr>
<h2 id="title-Docker-里laravel-框架composer报错-kill"><a href="#title-Docker-里laravel-框架composer报错-kill" class="headerlink" title="title:Docker 里laravel 框架composer报错 kill"></a>title:Docker 里laravel 框架composer报错 kill</h2><blockquote>
<p>报错信息</p>
</blockquote>
<p>PHP Warning:  proc_open(): fork failed - Out of memory </p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p>宿主机加swap内存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bin/bash!</span></span><br><span class="line">/bin/dd <span class="keyword">if</span>=/dev/zero of=/var/swap.2 bs=1M count=1024</span><br><span class="line">/sbin/mkswap /var/swap.2</span><br><span class="line">/sbin/swapon /var/swap.2</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一行：创建一个 1G 大小的文件</span></span><br><span class="line"><span class="comment">#第二行：格式化该文件</span></span><br><span class="line"><span class="comment">#第三行：将该文件挂载至文件系统中</span></span><br><span class="line">composer install</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Swift 5 对接 OC的 TalkingDataAppCpa.h初始化时报错，参数不存在Argument passd to call that takes no arguments</title>
    <url>/2021/11/29/Swift%205%20%E5%AF%B9%E6%8E%A5%20OC%E7%9A%84%20TalkingDataAppCpa.h%E5%88%9D%E5%A7%8B%E5%8C%96%E6%97%B6%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>在调用TD的包初始化的时候会报一个下面这样的错↓</p>
<p><img data-src="https://i.nekom.cc/usr/uploads/2019/09/2044509974.png" alt="截图"></p>
<p>Argument passd to call that takes no arguments</p>
<a id="more"></a>

<p>当时我就在想，参数有啊？明明在哪写着呢，为什么会报没有参数呢？</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>TD扩展是用OC写的，打开<code>TalkingDataAppCpa.h</code>发现他的oc方法是这样写的</p>
<p><img data-src="https://i.nekom.cc/usr/uploads/2019/09/486616889.png" alt="截图"></p>
<p>我的理解是，在swift中init属于swift语言中的初始化方法，但oc中的init↑如上面这张图所示，init在oc的含义应该是”初始化操作”，而在swift里应该是”初始化对象”</p>
<p>上面的oc里的初始化方法更像是一个普通的方法做了初始化操作。而swift编译器把这个方法作为初始化方法去编译，而swift做初始化操作的时候，因为oc里的那个没有做初始化一个类应有的操作，导致里面的类成员没有被初始化，然后报错，没有参数。</p>
<blockquote>
<p>以上只是猜测，没有细究这块的东西，毕竟swift我认为还是少和oc打交道比较好。</p>
</blockquote>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决方案很简单，项目里新建个oc文件，自己定义一个类在里面继承一下TalkingDataAppCpa.h，把那个init方法名重构一下就行了，比如改成initAppid:，然后用你自己定义的类初始化</p>
]]></content>
      <tags>
        <tag>swift5</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 命令手记</title>
    <url>/2021/11/29/docker%20%E5%91%BD%E4%BB%A4%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>docker apt-get 太慢的换源方案</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i s@/deb.debian.org/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">sed -i s@/security.debian.org/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br><span class="line">    </span><br><span class="line">sed -i s@/&#123;替换掉原本的域名&#125;/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker 安装php扩展</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-php-ext-install 扩展名</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>git中的hook方法之pre-push应用</title>
    <url>/2021/11/29/git%E4%B8%AD%E7%9A%84hook%E6%96%B9%E6%B3%95%E4%B9%8Bpre-push%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>本方案最终效果为：任意项目中的<code>git [push|commit...]</code>等操作之后，执行自定义脚本发送微信消息</p>
</blockquote>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol>
<li>微信小助手 2.5.7</li>
<li>微信2.3.31</li>
<li>git</li>
</ol>
<h3 id="安装微信小助手"><a href="#安装微信小助手" class="headerlink" title="安装微信小助手"></a>安装微信小助手</h3><p><a href="https://github.com/MustangYM/WeChatExtension-ForMac" target="_blank" rel="noopener">微信小助手</a></p>
<p>安装好微信小助手才能使用脚本发消息</p>
<h3 id="配置git-hook"><a href="#配置git-hook" class="headerlink" title="配置git-hook"></a>配置git-hook</h3><blockquote>
<p><a href="https://baidu.com/s?wd=git-hook是什么" target="_blank" rel="noopener">git-hook是个什么东西</a></p>
</blockquote>
<p>大概意思就是在特定的操作(commit,push…)，之后git会调用一些脚本，这些脚本是我们可以自定义的。</p>
<blockquote>
<p>这里介绍2个hook点<code>pre-push``pre-commit</code>，分别是push后触发和commit后触发</p>
</blockquote>
<p>首先<code>cd .git/hooks</code>到项目目录下的<code>.git</code>文件夹里面的<code>hooks文件夹</code>里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ls</span><br><span class="line">total 104</span><br><span class="line">drwxr-xr-x  14 Neko  staff   448 May 26 15:03 .</span><br><span class="line">drwxr-xr-x  14 Neko  staff   448 May 26 18:19 ..</span><br><span class="line">-rwxr-xr-x   1 Neko  staff   478 May 15 17:52 applypatch-msg.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff   896 May 15 17:52 commit-msg.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff  3327 May 15 17:52 fsmonitor-watchman.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff   189 May 15 17:52 post-update.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff   424 May 15 17:52 pre-applypatch.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff  1638 May 15 17:52 pre-commit.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff   416 May 15 17:52 pre-merge-commit.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff   922 May 26 15:03 pre-push.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff  4898 May 15 17:52 pre-rebase.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff   544 May 15 17:52 pre-receive.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff  1492 May 15 17:52 prepare-commit-msg.sample</span><br><span class="line">-rwxr-xr-x   1 Neko  staff  3610 May 15 17:52 update.sample</span><br></pre></td></tr></table></figure>
<p>大概是这样的，git已经默认给了你一些例子了。</p>
<p>运行 <code>cp ./pre-push.sample ./pre-push</code></p>
<p>打开 <code>vim pre-push</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#... 上面都是一些介绍，自己打开看一下吧，这里只做关键部分</span></span><br><span class="line"><span class="comment"># 项目分支</span></span><br><span class="line">remote=<span class="string">"<span class="variable">$1</span>"</span> </span><br><span class="line"><span class="comment"># 远端git仓库地址</span></span><br><span class="line">url=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得最后一次commit的msg 这一行是我自己加的</span></span><br><span class="line">info=<span class="string">"<span class="variable">$(echo $(git log -1 HEAD | grep "    ")</span>)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#... 下面是你可以自定义的bash脚本代码，这里是我写的一个发微信消息到某个人的脚本</span></span><br><span class="line">time_send wxid_dobw01p4hqcp22 <span class="string">"❤接口代码有更新了commit:<span class="variable">$info</span>"</span></span><br></pre></td></tr></table></figure>

<p>当每次<code>git push ...</code>的时候，这个文件就会执行 </p>
<p>同理的<code>pre-commit</code>改一下文件名，写上自己的脚本代码就行，这样就能在commit时触发脚本了</p>
<h3 id="发送微信的脚本"><a href="#发送微信的脚本" class="headerlink" title="发送微信的脚本"></a>发送微信的脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; vim time_send </span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 第一个参数是微信的userId,第二个参数是内容</span></span><br><span class="line">curl --request POST \</span><br><span class="line">--url <span class="string">'http://127.0.0.1:52700/wechat-plugin/send-message?='</span> \</span><br><span class="line">--header <span class="string">'cache-control: no-cache'</span> \</span><br><span class="line">--header <span class="string">'host: 127.0.0.1:52700'</span> \</span><br><span class="line">--data userId=<span class="string">"<span class="variable">$1</span>"</span> \</span><br><span class="line">--data content=<span class="string">"<span class="variable">$2</span>"</span></span><br></pre></td></tr></table></figure>

<p><a href="http://127.0.0.1:52700/wechat-plugin/user" target="_blank" rel="noopener">userId获取</a></p>
<p><strong>注意这里是可以发到微信群里的</strong></p>
<p><code>xxxxx@chat-room</code>这种格式是群，一样可以发</p>
<p>其实这个接口还是有很多的，有兴趣的可以研究一下那个微信小助手</p>
]]></content>
  </entry>
  <entry>
    <title>ios 13 present vc 出模态状态的问题</title>
    <url>/2021/11/29/iOS%2013%20present%20%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="present-vc-之后"><a href="#present-vc-之后" class="headerlink" title="present(vc) 之后"></a>present(vc) 之后</h2><p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-03-17-074911.png?x-oss-process=style/shuiyin" alt="image-20200317154909698"></p>
<p>网上查90的博客都是一句话就完事了，不告诉你加在哪。</p>
<a id="more"></a>

<p><code>vc.modalPresentationStyle = .fullScreen</code></p>
<p>这样没问题，真的相信我。</p>
<p>你们加上了还是没有效果的原因是因为你们是可能是这样用的</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设这里self是A页面</span></span><br><span class="line"><span class="keyword">self</span>.view.modalPresentationStyle = .fullScreen</span><br><span class="line"><span class="keyword">let</span> vc = <span class="type">BPageController</span>()</span><br><span class="line"><span class="keyword">self</span>.present(vc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>

<p>可能是这样用的</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b页面里的代码</span></span><br><span class="line"><span class="keyword">self</span>.view.modalPresentationStyle = .fullScreen</span><br></pre></td></tr></table></figure>

<p>可能是两边都加</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设这里self是A页面</span></span><br><span class="line"><span class="keyword">self</span>.view.modalPresentationStyle = .fullScreen</span><br><span class="line"><span class="keyword">let</span> vc = <span class="type">BPageController</span>()</span><br><span class="line"><span class="keyword">self</span>.present(vc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// b页面里的代码</span></span><br><span class="line"><span class="keyword">self</span>.view.modalPresentationStyle = .fullScreen</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 但这样都是<strong>不行的</strong>因为我试过……</p>
</blockquote>
<p>但正确做法是这样</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设这里self是A页面</span></span><br><span class="line"><span class="keyword">let</span> vc = <span class="type">BPageController</span>()</span><br><span class="line">vc.modalPresentationStyle = .fullScreen</span><br><span class="line"><span class="keyword">self</span>.present(vc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>



<p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-03-17-075658.png?x-oss-process=style/shuiyin" alt="image-20200317155657412"></p>
]]></content>
  </entry>
  <entry>
    <title>ios 本地静默推送到iwatch上</title>
    <url>/2021/11/29/ios%E6%9C%AC%E5%9C%B0%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81%E5%88%B0iwatch/</url>
    <content><![CDATA[<p><a href="https://stackoverrun.com/cn/q/10244757" target="_blank" rel="noopener">参考</a></p>
<p>简单来说就是不设置参数</p>
<p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-04-29-081417.png?x-oss-process=style/shuiyin" alt="image-20200429161417535"></p>
]]></content>
  </entry>
  <entry>
    <title>ios 轻微震动 震动反馈 方案</title>
    <url>/2021/11/29/ios%E8%BD%BB%E5%BE%AE%E9%9C%87%E5%8A%A8%E7%9A%84%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIImpactFeedbackGenerator</span> *generator = [[<span class="built_in">UIImpactFeedbackGenerator</span> alloc] initWithStyle: <span class="built_in">UIImpactFeedbackStyleLight</span>];</span><br><span class="line">[generator prepare];</span><br><span class="line">[generator impactOccurred];</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通短震，3D Touch 中 Peek 震动反馈</span></span><br><span class="line">AudioServicesPlaySystemSound(<span class="number">1519</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通短震，3D Touch 中 Pop 震动反馈</span></span><br><span class="line">AudioServicesPlaySystemSound(<span class="number">1520</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连续三次短震</span></span><br><span class="line">AudioServicesPlaySystemSound(<span class="number">1521</span>);</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/d4567dbd7dde" target="_blank" rel="noopener">参考</a></p>
]]></content>
      <tags>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>高德地图的坑</title>
    <url>/2021/11/29/ios%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E5%9D%91/</url>
    <content><![CDATA[<h2 id="获取不到reGeocode"><a href="#获取不到reGeocode" class="headerlink" title="获取不到reGeocode"></a>获取不到reGeocode</h2><p>原因可能是高德官网包名不对</p>
]]></content>
  </entry>
  <entry>
    <title>mac 拖动应用程序秒切桌面的方法</title>
    <url>/2021/11/29/mac%E6%8B%96%E5%8A%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%A7%92%E5%88%87/</url>
    <content><![CDATA[<p>Mac系统有一大优势，就是在一台电脑上面，可以设定出很多桌面空间使用，这样我们的桌面就不会很凌乱，像MacGG一般都会用到4个桌面空间。在使用桌面空间的时候，大家可能都会用到一个功能，就是我要移动一个窗口到另一个桌面空间，都会把窗口拖到屏幕右边停留几秒，就回自动的切换到下一个桌面空间。今天MacGG给大家介绍一个方法，可以秒切哈。</p>
<p>什么是秒切，就是你拖动窗口到屏幕边缘，无需停留，就自动切到下一桌面空间。</p>
<p>首先打开“终端”（Finder-&gt;应用程序-&gt;实用工具-&gt;终端），并且输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.dock workspaces-edge-delay -float 0;killall Dock</span><br></pre></td></tr></table></figure>

<p>现在大家试一下秒切吧。哈哈。。很爽不。是不是太快了，如果觉得太快，我们还可以在改改设定，我就设定在屏幕边缘停留半秒切换吧。<br>再次打开“终端”（Finder-&gt;应用程序-&gt;实用工具-&gt;终端），并且输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.dock workspaces-edge-delay -float 0.15;killall Dock</span><br></pre></td></tr></table></figure>

<p>如果你想还原成原样，也很简单，再次打开“终端”（Finder-&gt;应用程序-&gt;实用工具-&gt;终端），并且输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults delete com.apple.dock workspaces-edge-delay;killall Dock</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>mac os crontab</title>
    <url>/2021/11/29/mac%20os%20crontab/</url>
    <content><![CDATA[<p>title: mac os crontab 不执行的问题</p>
<h2 id="对于新版本mac-os系统"><a href="#对于新版本mac-os系统" class="headerlink" title="对于新版本mac os系统"></a>对于新版本mac os系统</h2><p><a href="https://blog.csdn.net/yao1500/article/details/106163422" target="_blank" rel="noopener">地址</a></p>
<p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-05-22-020554.png?x-oss-process=style/shuiyin" alt="image-20200522100554540"></p>
<h2 id="crontab-未启用的问题"><a href="#crontab-未启用的问题" class="headerlink" title="crontab 未启用的问题"></a>crontab 未启用的问题</h2><p><a href="https://blog.csdn.net/sanbingyutuoniao123/article/details/70599086?locationNum=4%20fps=1" target="_blank" rel="noopener">地址</a></p>
<p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-05-22-020659.png?x-oss-process=style/shuiyin" alt="image-20200522100658711"></p>
<h2 id="脚本的环境变量"><a href="#脚本的环境变量" class="headerlink" title="脚本的环境变量"></a>脚本的环境变量</h2><p>实际也很简单，我们手动执行某个脚本时，是在当前shell环境下进行的，程序能找到环境变量；而系统自动执行任务调度时，除了默认的环境，是不会加载任何其他环境变量的。因此就需要在crontab文件中指定任务运行所需的所有环境变量。</p>
<p>修改你的脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#! /bin/sh </span></span><br><span class="line"><span class="built_in">source</span> /etc/profile   //添加这句，</span><br><span class="line">//其他脚本</span><br></pre></td></tr></table></figure>



<blockquote>
<p>tips:/usr/lib/cron/tabs 是你执行 crontab -e 添加的任务目录</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>mysql 5.7 分组group by 查询报错 only_full_group_by</title>
    <url>/2021/11/29/mysql5.7%E5%88%86%E7%BB%84group%20by%20%E6%9F%A5%E8%AF%A2%E6%8A%A5%E9%94%99only_full_group_by/</url>
    <content><![CDATA[<h2 id="实践解决"><a href="#实践解决" class="headerlink" title="实践解决"></a>实践解决</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 统计当天综合</span><br><span class="line">$time &#x3D; strtotime(date(&#39;Y-m-d&#39;));</span><br><span class="line">$sql &#x3D; &lt;&lt;&lt;EOT</span><br><span class="line">select </span><br><span class="line">sum(uv) as uv,</span><br><span class="line">sum(accredit) as accredit,</span><br><span class="line">sum(new_video) as new_video,</span><br><span class="line">sum(old_video) as old_video,</span><br><span class="line">sum(share) as share,</span><br><span class="line">sum(day_all_uv) as day_all_uv,</span><br><span class="line">&#96;time&#96;,</span><br><span class="line">any_value(channel_name) as channel_name,</span><br><span class="line">any_value(channel_app) as channel_app,</span><br><span class="line">any_value(channel_id) as channel_id</span><br><span class="line"></span><br><span class="line">from channel.xcx_channel_count</span><br><span class="line">where &#96;time&#96; &#x3D; $time </span><br><span class="line">group by channel_id</span><br><span class="line">EOT;</span><br><span class="line">&#x2F;&#x2F; $obj-&gt;query(&#39;SET sql_mode&#x3D;(SELECT REPLACE(@@sql_mode,\&#39;ONLY_FULL_GROUP_BY\&#39;,\&#39;\&#39;));&#39;); &#x2F;&#x2F;加上any_value之后不用这句了否则就要加上这句</span><br><span class="line">$info &#x3D; $obj-&gt;query($sql);</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.聚合函数不会触发<code>only_full_group_by</code><br>2.加<code>any_value()</code>的参数不会触发<code>only_full_group_by</code><br>3.Mysql配置文件删除<code>only_full_group_by</code>或者出错代码前执行取消设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET sql_mode&#x3D;(SELECT REPLACE(@@sql_mode,&#39;ONLY_FULL_GROUP_BY&#39;,&#39;&#39;));</span><br></pre></td></tr></table></figure>

<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://www.cnblogs.com/kenshinobiy/p/9580701.html" target="_blank" rel="noopener">MYSQL5.7版本sql_mode=only_full_group_by问题</a></p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ios</title>
    <url>/2021/11/29/ios%E4%B8%8A%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ol>
<li>环境问题，开发按正常开发就行。</li>
<li>ios端给unity的接口部分：<ol>
<li>ios里原生代码，重写。</li>
<li>加简单的混淆。比如之前培训提到的，宏定义混淆。</li>
</ol>
</li>
<li>unity端：<ol>
<li>注意所有敏感图片，比如和钱有关的。敏感字符串。</li>
</ol>
</li>
<li>测试：<ol>
<li>别用自己的电脑打包了。感觉会出问题。这块ios这边注意就行，unity该怎么开发怎么开发。</li>
<li>打包的时候用虚拟机打包。</li>
</ol>
</li>
<li>后端：<ol>
<li>接口：打算返回的json串加密。这块我感觉苹果没理由去拒审，接口这东西就是商业机密型的东西其实。没理由让苹果看的。</li>
</ol>
</li>
</ol>
<h2 id="提审"><a href="#提审" class="headerlink" title="提审"></a>提审</h2><ol>
<li>uiwebview问题，记得别有</li>
<li>提审的文案备注之类的写详细，app怎么玩的之类的。</li>
<li>账号授权，appid账号，敏感的账号就别授权了。</li>
</ol>
<h2 id="审核状态"><a href="#审核状态" class="headerlink" title="审核状态"></a>审核状态</h2><p><a href="https://www.jianshu.com/p/0c6864055703" target="_blank" rel="noopener">用博客页面的参数</a></p>
<h2 id="部署虚拟机"><a href="#部署虚拟机" class="headerlink" title="部署虚拟机"></a>部署虚拟机</h2><p><a href="https://www.guofenchaxun.com/" target="_blank" rel="noopener">苹果设备查询网站</a></p>
<p><a href="http://showdoc.litemob.com/web/#/page/840" target="_blank" rel="noopener">生成的mac信息</a></p>
<ul>
<li>虚拟机加黑苹果系统搭建好，装上xcode做个初始版本</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>docker apt-get 太慢的换源方案</title>
    <url>/2020/09/08/docker%20apt-get%20%E5%A4%AA%E6%85%A2%E7%9A%84%E6%8D%A2%E6%BA%90%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i s@/deb.debian.org/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">sed -i s@/security.debian.org/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br><span class="line">    </span><br><span class="line">sed -i s@/&#123;替换掉原本的域名&#125;/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>执行think run 报错 image not found</title>
    <url>/2021/11/29/php%20image%20notfount/</url>
    <content><![CDATA[<h2 id="执行think-run-报错-image-not-found"><a href="#执行think-run-报错-image-not-found" class="headerlink" title="执行think run 报错 image not found"></a>执行think run 报错 image not found</h2><p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-07-07-023621.jpg?x-oss-process=style/shuiyin" alt="56741594089171_.pic"></p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p>原因可能是icu4c指向了旧版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew uninstall --ignore-dependencies icu4c</span><br><span class="line">brew cleanup</span><br><span class="line">brew install icu4c</span><br></pre></td></tr></table></figure>

<p>更新一下icu4c</p>
]]></content>
  </entry>
  <entry>
    <title>nohup的应用</title>
    <url>/2021/11/29/nohup%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<hr>
<h2 id="title-nohup-的应用"><a href="#title-nohup-的应用" class="headerlink" title="title:nohup 的应用"></a>title:nohup 的应用</h2><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><blockquote>
<p>nohup php /var/www/html/cmd/mq_worker.php &gt;./test 2&gt;&amp;1  &amp;</p>
</blockquote>
<p>拆分 </p>
<blockquote>
<p>nohup command &gt;./test 2&gt;&amp;1 &amp; </p>
</blockquote>
<p>代表按下回车之后整个command都是后台运行的</p>
<blockquote>
<p><code>php /var/www/html/cmd/mq_worker.php</code></p>
</blockquote>
<p>command 部分</p>
<blockquote>
<p>将command命令产生的输出 重定向到<code>&gt;./test</code>文件 并且将错误输出<code>2&gt;&amp;1</code> 也重定向到 <code>&gt;./test</code></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>php中的$this深入理解</title>
    <url>/2021/11/29/php%E4%B8%AD%E7%9A%84$this%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="正常情况"><a href="#正常情况" class="headerlink" title="正常情况"></a>正常情况</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line">object(A)<span class="comment">#1 (1) &#123;</span></span><br><span class="line">  [<span class="string">"test"</span>]=&gt;</span><br><span class="line">  int(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="带闭包的正常用法"><a href="#带闭包的正常用法" class="headerlink" title="带闭包的正常用法"></a>带闭包的正常用法</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $testa=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        $obj = <span class="keyword">new</span> B();</span><br><span class="line">        $obj-&gt;run(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span><br><span class="line">            var_dump(<span class="keyword">$this</span>);</span><br><span class="line">            var_dump(<span class="keyword">$this</span>-&gt;testa);</span><br><span class="line">        &#125;);</span><br><span class="line">        $obj-&gt;show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Closure</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $testb =<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(\Closure $closure)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;testb = $closure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $s = <span class="keyword">$this</span>-&gt;testb;</span><br><span class="line">        $s();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line">object(A)<span class="comment">#1 (1) &#123;</span></span><br><span class="line">  [<span class="string">"testa"</span>]=&gt;</span><br><span class="line">  int(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">int(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>注意这里输出，可以看出，<code>$this</code>是<code>A</code>对象实例</p>
<p>总结：A类里new出来个B类，然后方法传一个闭包，此时闭包内<code>$this</code>指向的A类。</p>
<h2 id="加亿点点细节"><a href="#加亿点点细节" class="headerlink" title="加亿点点细节"></a>加亿点点细节</h2><h3 id="问题1-如何在run的闭包里让-this-gt-test-b成立-并且成功调用到OneClass类里的test-b"><a href="#问题1-如何在run的闭包里让-this-gt-test-b成立-并且成功调用到OneClass类里的test-b" class="headerlink" title="问题1 如何在run的闭包里让$this-&gt;test_b成立,并且成功调用到OneClass类里的test_b"></a>问题1 如何在run的闭包里让<code>$this-&gt;test_b</code>成立,并且成功调用到OneClass类里的test_b</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test_a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $obj = <span class="keyword">new</span> OneClass();</span><br><span class="line">        $obj-&gt;run(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            var_dump(<span class="keyword">$this</span>-&gt;test_b);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 打印一下OneClass里的test_b</span></span><br><span class="line">        $obj-&gt;show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Closure</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $test_b = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(\Closure $closure)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test_b = $closure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $test_b = <span class="keyword">$this</span>-&gt;test_b;</span><br><span class="line">        $test_b();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> Controller();</span><br><span class="line">$obj-&gt;start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: Notice: Undefined property: Controller::$test_b</span></span><br></pre></td></tr></table></figure>

<h3 id="试着理解一下-为什么闭包里-this指向了OneClass"><a href="#试着理解一下-为什么闭包里-this指向了OneClass" class="headerlink" title="试着理解一下 为什么闭包里$this指向了OneClass"></a>试着理解一下 为什么闭包里$this指向了OneClass</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test_a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $obj = <span class="keyword">new</span> OneClass();</span><br><span class="line">        $obj-&gt;run(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            var_dump(<span class="keyword">$this</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 执行一下run里的闭包</span></span><br><span class="line">        $obj-&gt;show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Closure</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $test_b = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(\Closure $closure)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test_b = $closure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test_b();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$name-&gt;call(<span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> Controller();</span><br><span class="line">$obj-&gt;start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// class OneClass#2 (1) &#123;</span></span><br><span class="line"><span class="comment">//  public $test_b =&gt;</span></span><br><span class="line"><span class="comment">//  class Closure#3 (1) &#123;</span></span><br><span class="line"><span class="comment">//    public $this =&gt;</span></span><br><span class="line"><span class="comment">//    class Controller#1 (1) &#123;</span></span><br><span class="line"><span class="comment">//      public $test_a =&gt;</span></span><br><span class="line"><span class="comment">//      int(1)</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="总结-Closure-中的call与bindTo应用"><a href="#总结-Closure-中的call与bindTo应用" class="headerlink" title="总结 \Closure 中的call与bindTo应用"></a>总结 \Closure 中的call与bindTo应用</h3>]]></content>
  </entry>
  <entry>
    <title>php里一个safe_call的必要性</title>
    <url>/2021/11/29/php%E9%87%8C%E4%B8%80%E4%B8%AAsafe_call%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/</url>
    <content><![CDATA[<hr>
<p>title:php里一个safe_call的必要性<br>tag:php</p>
<hr>
<h1 id="safe-call-是个啥"><a href="#safe-call-是个啥" class="headerlink" title="safe_call 是个啥"></a>safe_call 是个啥</h1><h2 id="php里的异常"><a href="#php里的异常" class="headerlink" title="php里的异常"></a>php里的异常</h2><p>首先在说<code>safe_call</code>之前，先说一下<code>异常 Exception</code>。</p>
<p><code>异常</code>顾名思义，异常的情况，在PHP中出现异常会导致程序终止，而与<code>Java</code>这种类型的编译型语言不一样，PHP中出现异常是<strong>只针对当前的一次请求</strong>的。而<code>Java</code>中出现，不做处理会导致整个服务出现问题。</p>
<h2 id="解决痛点"><a href="#解决痛点" class="headerlink" title="解决痛点"></a>解决痛点</h2><p>上面说了异常，这里说一下<code>safe_call</code>所解决的痛点。</p>
<p>众所周知，一个新功能的迭代很有可能是建立在老功能的基础上的。比如A功能写完了，后面可能要加个新的东西，然后你不得不在老功能上做一些改动的时候。</p>
<p>这时候想必你也是<strong>心惊胆战</strong>的，毕竟你也<strong>不知道</strong>你加的或改的这段代码<strong>会不会对线上</strong>有什么影响。</p>
<h2 id="问题抛出如何解决"><a href="#问题抛出如何解决" class="headerlink" title="问题抛出如何解决"></a>问题抛出如何解决</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'safe_call'</span>))&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">safe_call</span><span class="params">($callback,$tag=<span class="string">''</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $callback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $exception) &#123;</span><br><span class="line">            <span class="comment">/// 自己的异常处理，比如记录日志，比如发送报警新加的东西出现问题了</span></span><br><span class="line">            <span class="keyword">return</span> $msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">safe_call(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    FenHongCatDot::init()-&gt;setInClick()-&gt;save();</span><br><span class="line">&#125;,<span class="string">'fenhongcat_dot_in_click'</span>);</span><br></pre></td></tr></table></figure>

<p>在你不确定那地方会出现问题的地方加上这么个方法去嵌套一下</p>
<h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>本质上，其实只是新的东西入口的地方一定要做好<code>try catch</code></p>
]]></content>
  </entry>
  <entry>
    <title>php的优化方案</title>
    <url>/2021/11/29/php-fpm%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="php-fpm-配置线程数"><a href="#php-fpm-配置线程数" class="headerlink" title="php-fpm 配置线程数"></a>php-fpm 配置线程数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf</span><br><span class="line">;vi 找到 </span><br><span class="line">pm.max_children &#x3D; 10</span><br><span class="line">;修改线程数</span><br><span class="line">pm &#x3D; static</span><br><span class="line">;设置静态</span><br></pre></td></tr></table></figure>

<h2 id="php-ini-amp-开启opcache"><a href="#php-ini-amp-开启opcache" class="headerlink" title="php.ini &amp; 开启opcache"></a>php.ini &amp; 开启opcache</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zend_extension&#x3D;opcache.so</span><br><span class="line">[opcache]</span><br><span class="line">;1开启0关闭</span><br><span class="line">opcache.enable&#x3D;1</span><br><span class="line">;命令行的开关0开1闭</span><br><span class="line">;opcache.enable_cli&#x3D;0</span><br><span class="line"></span><br><span class="line">opcache.memory_consumption&#x3D;64</span><br><span class="line">opcache.interned_strings_buffer&#x3D;4</span><br><span class="line">opcache.max_accelerated_files&#x3D;100000</span><br><span class="line">opcache.validate_timestamps&#x3D;0</span><br><span class="line">opcache.revalidate_freq&#x3D;10</span><br><span class="line">opcache.save_comments&#x3D;1</span><br><span class="line">opcache.fast_shutdown&#x3D;0</span><br><span class="line">opcache.file_cache&#x3D;&#x2F;tmp</span><br><span class="line">opcache.huge_code_pages&#x3D;1</span><br></pre></td></tr></table></figure>

<h3 id="centos-6-开启huge-page"><a href="#centos-6-开启huge-page" class="headerlink" title="centos 6 - 开启huge - page"></a>centos 6 - 开启huge - page</h3><p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl vm.nr_hugepages=512</span><br></pre></td></tr></table></figure>

<p>修改php.ini</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">opcache.huge_code_pages=<span class="number">1</span></span><br></pre></td></tr></table></figure>



<h3 id="Opcache-file-cache"><a href="#Opcache-file-cache" class="headerlink" title="Opcache file cache"></a>Opcache file cache</h3><p>开启Opcache File Cache(实验性), 通过开启这个, 我们可以让Opcache把opcode缓存缓存到外部文件中, 对于一些脚本, 会有很明显的性能提升.<br>在php.ini中加入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opcache.file_cache&#x3D;&#x2F;tmp</span><br></pre></td></tr></table></figure>

<p>这样PHP就会在/tmp目录下Cache一些Opcode的二进制导出文件, 可以跨PHP生命周期存在.</p>
<h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opcache.validate_timestamps&#96; 默认是&#96;OFF</span><br></pre></td></tr></table></figure>

<ul>
<li>OPcache 会每隔 opcache.revalidate_freq 设定的秒数 检查脚本是否更新。 如果禁用此选项，你必须使用 opcache_reset() 或者 opcache_invalidate() 函数来手动重置 OPcache，也可以 通过重启 Web 服务器来使文件系统更改生效。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opcache.revalidate_freq&#96; 单位 &#96;秒&#96; 默认为 &#96;2</span><br></pre></td></tr></table></figure>

<ul>
<li>检查脚本时间戳是否有更新的周期，以秒为单位。 设置为 0 会导致针对每个请求， OPcache 都会检查脚本更新。</li>
</ul>
<p>从官方文档来看：<br>将 <code>opcache.validate_timestamps</code> 设置为 <code>True</code><br>将 <code>opcache.revalidate_freq</code> 设置为一个适当的值，如<code>30</code> 这个时间根据服务器压力灵活调整。</p>
<p>上面设置后，最差情况代码更新30秒后会生效，最快立即生效。</p>
<p>记得清理文件缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 清理这个目录下的文件</span><br><span class="line">opcache.file_cache&#x3D;&#x2F;tmp</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php opcache_reset();?&gt;</span><br></pre></td></tr></table></figure>



<h2 id="php-composer-install-内存超出"><a href="#php-composer-install-内存超出" class="headerlink" title="php composer install 内存超出"></a>php composer install 内存超出</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php -d memory_limit=-1 /usr/bin/composer update</span><br></pre></td></tr></table></figure>

<h2 id="composer-只require不update"><a href="#composer-只require不update" class="headerlink" title="composer 只require不update"></a>composer 只require不update</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -d memory_limit&#x3D;-1 &#x2F;usr&#x2F;bin&#x2F;composer require neko&#x2F;wall --ignore-platform-reqs --no-update</span><br></pre></td></tr></table></figure>



<p>git push origin develop:master -f</p>
<p>把本地的 develop 分支强制(-f)推送到远程 master</p>
]]></content>
      <tags>
        <tag>php-fpm</tag>
      </tags>
  </entry>
  <entry>
    <title>xcode ios 编译运行后崩溃</title>
    <url>/2021/11/29/xcodeios%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B4%A9%E6%BA%83/</url>
    <content><![CDATA[<h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><p>穿山甲sdk</p>
<p>unity2018</p>
<h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-06-16 11:08:06.863865+0800 unicursal[10039:4045359] -[__NSCFConstantString bu_CachePath]: unrecognized selector sent to instance 0x1049ef1c0</span><br><span class="line">2020-06-16 11:08:06.864450+0800 unicursal[10039:4045359] *** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;-[__NSCFConstantString bu_CachePath]: unrecognized selector sent to instance 0x1049ef1c0&#39;</span><br><span class="line">*** First throw call stack:</span><br><span class="line">(0x1bdf3aa48 0x1bdc61fa4 0x1bde3e5a8 0x1bdf3eaf4 0x1bdf40a7c 0x103c5caf8 0x1bdc07184 0x1bdbae9a4 0x103c5cac8 0x1bdc69e78 0x1030520d4 0x1030615b8 0x103060334 0x1030603fc 0x103055894 0x10305c3c0 0x1bdd40460 0x1bdf416e0 0x1bde68e80 0x1be22c3bc 0x102eefd54 0x102eefdfc 0x1bdd3c360)</span><br><span class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>工程文件中选择Build Setting，在”Other Linker Flags”中加入”-ObjC”   ,问题就解决了,注意大小写</p>
]]></content>
  </entry>
  <entry>
    <title>一个有趣的php单例实现方法</title>
    <url>/2021/11/29/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84php%E5%8D%95%E4%BE%8B%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>它利用的是php中的trait特性</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">trait</span> Singleton</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">(...$args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">self</span>::$instance))&#123;</span><br><span class="line">            <span class="comment">// 这段代码的有趣之处在于这个static</span></span><br><span class="line">            <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">static</span>(...$args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Singleton</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = A::getInstance();</span><br><span class="line">$obj-&gt;show();</span><br><span class="line"><span class="comment">// string(1) "a"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="comment">// use Singleton;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::show();</span><br><span class="line">        var_dump(<span class="string">'b'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = B::getInstance();</span><br><span class="line">$obj-&gt;show();</span><br><span class="line"><span class="comment">// string(1) "a" </span></span><br><span class="line"><span class="comment">// 这里没有走B的show()方法,说明拿到的是A的实例化对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Singleton</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::show();</span><br><span class="line">        var_dump(<span class="string">'c'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = C::getInstance();</span><br><span class="line"></span><br><span class="line">$obj-&gt;show();</span><br><span class="line"><span class="comment">// string(1) "a"</span></span><br><span class="line"><span class="comment">// string(1) "c"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>依赖注入的花销外表下的实质</title>
    <url>/2021/11/29/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E8%8A%B1%E9%94%80%E5%A4%96%E8%A1%A8%E4%B8%8B%E7%9A%84%E5%AE%9E%E8%B4%A8/</url>
    <content><![CDATA[<blockquote>
<p> 类的依赖通过构造函数，或者某些情况下通过 「setter」 方法 「注入」到类中。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>关于ssh链接服务器之后的提示信息是做什么用的</title>
    <url>/2021/11/29/%E5%85%B3%E4%BA%8Essh%E9%93%BE%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E5%90%8E%E7%9A%84%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E6%98%AF%E5%81%9A%E4%BB%80%E4%B9%88%E7%94%A8%E7%9A%84/</url>
    <content><![CDATA[<h1 id="关于ssh链接服务器之后的提示信息是做什么用的"><a href="#关于ssh链接服务器之后的提示信息是做什么用的" class="headerlink" title="关于ssh链接服务器之后的提示信息是做什么用的"></a>关于ssh链接服务器之后的提示信息是做什么用的</h1><p><img data-src="http://nekoya.oss-cn-beijing.aliyuncs.com/blog/842nr.png" alt="image-20191009104243915"></p>
<p>如图↑</p>
<p>翻译如下↓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上次登录失败:10月9日星期三10:41:57 CST 2019从104.37.169.192 ssh:notty</span><br><span class="line">自上次成功登录以来，共有13次失败的登录尝试。</span><br><span class="line">最后一次登录:2019年10月9日星期三10:34:39，从111.207.253.216</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一行可以看出上次登录失败的家伙是来自哪个ip，失败的时间</p>
<p>第二行可以看出有多少次失败了</p>
<p>第三行最重要，可以看出最后一次登录的时间，如果不是正常的，则说明你的服务器可能被绿了</p>
</blockquote>
]]></content>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>关于服务器被扫描攻击这件事我的应对措施</title>
    <url>/2021/11/29/%E5%85%B3%E4%BA%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E6%89%AB%E6%8F%8F%E6%94%BB%E5%87%BB%E8%BF%99%E4%BB%B6%E4%BA%8B%E6%88%91%E7%9A%84%E5%BA%94%E5%AF%B9%E6%8E%AA%E6%96%BD/</url>
    <content><![CDATA[<h2 id="关于服务器被扫描攻击这件事我的应对措施"><a href="#关于服务器被扫描攻击这件事我的应对措施" class="headerlink" title="关于服务器被扫描攻击这件事我的应对措施"></a>关于服务器被扫描攻击这件事我的应对措施</h2><p>贴张图吧….</p>
<p><img data-src="http://nekoya.oss-cn-beijing.aliyuncs.com/blog/9mpoz.png" alt="image-20190928205811239"></p>
<a id="more"></a>



<p>该怎么说？这种现象其实很早就有了，猫也懒得管这件事，因为这种扫描..感觉很弱智啊！</p>
<p>首先给那些脚本脚本小子建议：</p>
<p>1.麻烦那些脚本小子升级一下爆破库在来扫啦！</p>
<p>2.我这个小破站经不起这么高频的请求啦！</p>
<p>3.请大佬高抬贵手放过这只残破的猫窝吧！</p>
<p>说起来…我这个小破站至于吗？（手动滑稽）</p>
<p>##ip访问限制方法</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span> default;</span><br><span class="line">  <span class="attribute">server_name</span> _;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <a href="https://www.cnblogs.com/weifeng1463/p/9197971.html" target="_blank" rel="noopener">nginx只允许域名访问，禁止ip访问</a></p>
<h2 id="ip请求频率限制方法"><a href="#ip请求频率限制方法" class="headerlink" title="ip请求频率限制方法"></a>ip请求频率限制方法</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="attribute">limit_req_zone</span> <span class="variable">$binary_remote_addr</span> zone=allips:<span class="number">10m</span> rate=1r/s;</span><br><span class="line">server&#123;</span><br><span class="line">		...</span><br><span class="line">    <span class="comment"># 加这一行调用</span></span><br><span class="line">    <span class="attribute">limit_req</span> zone=allips burst=<span class="number">5</span> nodelay;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <a href="https://www.cnblogs.com/jnhs/p/10740500.html" target="_blank" rel="noopener">nginx 限制ip的请求频率</a></p>
<h2 id="禁止ssh账号密码登录开启key登录"><a href="#禁止ssh账号密码登录开启key登录" class="headerlink" title="禁止ssh账号密码登录开启key登录"></a>禁止ssh账号密码登录开启key登录</h2><p><code>[root@neko ~]# ssh-keygen -t rsa</code></p>
]]></content>
      <tags>
        <tag>网络攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式实战应用</title>
    <url>/2021/11/29/%E5%85%BB%E9%B8%A1%E8%B5%9A%E6%B7%BB%E5%8A%A0%E9%B8%A1%E7%9A%84%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="策略模式实战应用"><a href="#策略模式实战应用" class="headerlink" title="策略模式实战应用"></a>策略模式实战应用</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>现在有一个接口，要求根据不同规则，更新到数据库，不同的规则已经多到需要一两百行的<code>if else</code>来判断规则。</p>
<p>这篇文章不会告诉你<strong>策略模式是什么</strong>，它只是个人的一些实战心得总结并告诉你如何运用。</p>
<h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><p>策略模式是个啥：</p>
<p><a href="https://www.runoob.com/design-pattern/strategy-pattern.html" target="_blank" rel="noopener">「PHP」策略模式</a></p>
<p> <a href="https://www.cnblogs.com/houdabao/p/9546871.html" target="_blank" rel="noopener"> 菜鸟教程之策略模式 </a></p>
<p> <a href="https://www.baidu.com/s?ie=UTF-8&wd=策略模式" target="_blank" rel="noopener">百度策略模式</a></p>
<h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>下看看都定义了那些文件吧~</p>
<p><img data-src="http://nekoya.oss-cn-beijing.aliyuncs.com/blog/vjdii.png?x-oss-process=style/shuiyin" alt="image-20191015161759250"></p>
<blockquote>
<p>敲黑板：注意啦<del>这里最重要的无非就是接口定义和用来管控的那个玩意，这两个东西一个关系着你写的策略模式的质量，弄不好还会白花时间的</del>甚至会出现一些奇奇怪怪的bug</p>
</blockquote>
<h2 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h2><h3 id="要做什么"><a href="#要做什么" class="headerlink" title="要做什么"></a>要做什么</h3><p>这里我需要根据<strong>id</strong>和<strong>余额</strong>的不同进行不同的<strong>逻辑</strong>，并且最重要的是判断条件太多啦！！！！而且返回的都是差不多的数据……</p>
<p>所以考虑用策略模式减少代码量……</p>
<p>太多if else真的看着很头疼！</p>
<h3 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象鸡算法类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenStrategyAbstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体算法方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">doAction</span><span class="params">($id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个接口，所有策略都去实现它</p>
<h3 id="接口返回"><a href="#接口返回" class="headerlink" title="接口返回"></a>接口返回</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fortyEightStrategy</span> <span class="keyword">extends</span> <span class="title">ChickenStrategyAbstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doAction</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当为48元的时候</span></span><br><span class="line">        <span class="keyword">switch</span> ($id) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">// id是1和2的鸡</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                $time = <span class="number">60</span> * <span class="number">60</span> * <span class="number">8</span>;<span class="comment">//5小时</span></span><br><span class="line"></span><br><span class="line">                $kill_egg      = <span class="number">4</span>;<span class="comment">// 鸡蛋</span></span><br><span class="line">                $land_multiple = <span class="number">5</span>;<span class="comment">//倍数</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">// id是3的鸡</span></span><br><span class="line">                $time = <span class="number">60</span> * <span class="number">60</span> * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">                $kill_egg      = <span class="number">5</span>;</span><br><span class="line">                $land_multiple = <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:<span class="comment">// id是4的鸡</span></span><br><span class="line">                $time = <span class="number">60</span> * <span class="number">60</span> * <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">                $kill_egg      = <span class="number">6</span>;</span><br><span class="line">                $land_multiple = <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:<span class="comment">// id是5的鸡</span></span><br><span class="line">                $time = <span class="number">60</span> * <span class="number">60</span> * <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">                $kill_egg      = <span class="number">8</span>;</span><br><span class="line">                $land_multiple = <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> [];<span class="comment">// 已售完</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'time'</span>     =&gt; $time,</span><br><span class="line">            <span class="string">'egg'</span>      =&gt; $kill_egg,</span><br><span class="line">            <span class="string">'num'</span>      =&gt; $num,</span><br><span class="line">            <span class="string">'multiple'</span> =&gt; $land_multiple</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>敲黑板：因为我的需求是需要用<code>$id</code>根据<strong>不同算法</strong>得到<strong>4个值</strong>所以用一个数组进行返回,并约定:如果都不符合条件则返回一个空数组。<strong>这里其实定义一个类作为model返回最好，但我偷懒了~</strong></p>
</blockquote>
<h4 id="比如这样"><a href="#比如这样" class="headerlink" title="比如这样"></a>比如这样</h4><p>再建一个文件<code>InfoModel.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfoModel</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $egg = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $mutiple = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="返回的时候"><a href="#返回的时候" class="headerlink" title="返回的时候"></a>返回的时候</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略算法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $id</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> InfoModel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doAction</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line">$obj = new InfoModel();</span><br><span class="line">$obj-&gt;time = $time;</span><br><span class="line">$obj-&gt;egg = $kill_egg;</span><br><span class="line">$obj-&gt;num = $num;</span><br><span class="line">$obj-&gt;mutiple = $land_multiple</span><br><span class="line"><span class="keyword">return</span> $obj;</span><br></pre></td></tr></table></figure>

<h4 id="这样做的好处"><a href="#这样做的好处" class="headerlink" title="这样做的好处"></a>这样做的好处</h4><p>排除了数组的<strong>不确定性</strong>因为你取值可能是这样<code>$info[&quot;egg&quot;]</code>后面如果没有<code>egg</code>这个key你就会报错。</p>
<p>因为数组是keyvalue结构，很有可能在上面判断的时候哪一步少了一个key，或者少了一个value，导致报错。</p>
<p>或者后期可能需要多加一个条件判断，然后不好维护，每个地方都要修改数组。有一个改错调起来就很麻烦了。</p>
<h3 id="实现策略"><a href="#实现策略" class="headerlink" title="实现策略"></a>实现策略</h3><p>没什么好说了，根据自己定的规则实现里面的逻辑就行了，比如上面代码的方法体里面就是<strong>策略</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fortyEightStrategy</span> <span class="keyword">extends</span> <span class="title">ChickenStrategyAbstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doAction</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       	... 这里都是策略的逻辑</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'time'</span>     =&gt; $time,</span><br><span class="line">            <span class="string">'egg'</span>      =&gt; $kill_egg,</span><br><span class="line">            <span class="string">'num'</span>      =&gt; $num,</span><br><span class="line">            <span class="string">'multiple'</span> =&gt; $land_multiple</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>敲黑板：这里并不是必须只有一个<code>doAction</code>你甚至可以在<strong>接口</strong>里定义<code>doAction1</code> <code>doAction2</code> <code>doAction3</code>每个对应同一个策略的不同逻辑，一个策略可以有多个不同的逻辑去处理</p>
</blockquote>
<p>我的设计是这样的：接口定义是金额策略分别是45元的策略，46元的策略。。49元的策略，每个策略（这里的45元策略就是每个像是<code>fortyEightStrategy</code>的类）的逻辑不一样，但返回的东西一样。</p>
<h3 id="管控策略"><a href="#管控策略" class="headerlink" title="管控策略"></a>管控策略</h3><p>这里主要是对策略模式的二次封装，比如我的代码是这样的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChickenStrategyFind</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> ChickenStrategyAbstract</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> $obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> $small_obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ChickenStrategyFind constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $price float 传余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($price)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 如果是小于45的话使用的策略</span></span><br><span class="line">        <span class="keyword">if</span> ($price &lt; <span class="number">45</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>::$small_obj = <span class="keyword">new</span> baseChickenStrategy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 大于45的话使用的策略</span></span><br><span class="line">        <span class="keyword">switch</span> (floor($price)) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">45</span>:<span class="comment">// 45元时策略</span></span><br><span class="line">                <span class="keyword">self</span>::$obj = <span class="keyword">new</span> fortyFiveStrategy();;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">46</span>:<span class="comment">// 46元时策略</span></span><br><span class="line">                <span class="keyword">self</span>::$obj = <span class="keyword">new</span> fortySixStrategy();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">47</span>:<span class="comment">// 47元时策略</span></span><br><span class="line">                <span class="keyword">self</span>::$obj = <span class="keyword">new</span> fortySevenStrategy();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">48</span>:<span class="comment">// 48元时策略</span></span><br><span class="line">                <span class="keyword">self</span>::$obj = <span class="keyword">new</span> fortyEightStrategy();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">49</span>:<span class="comment">// 49元时策略</span></span><br><span class="line">                <span class="keyword">self</span>::$obj = <span class="keyword">new</span> fortyNineStrategy();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="comment">// 50以上元时策略</span></span><br><span class="line">                <span class="keyword">self</span>::$obj = <span class="keyword">new</span> fortyNineStrategy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 获取策略的结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span><span class="params">($id, $count)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>::$small_obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>::$small_obj-&gt;doBaseAction($id, $count);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>::$obj-&gt;doAction($id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我是通过这个类与策略模式进行交互的，首先new一个<code>ChickenStrategyFind</code>类然后调用它的的<code>getInfo</code>方法就行</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传入一个30元，返回策略模式计算的结果</span></span><br><span class="line">$chicken_obj = <span class="keyword">new</span> ChickenStrategyFind(<span class="number">30</span>);</span><br><span class="line">$chicken_condition = $chicken_obj-&gt;getInfo($chicken_id,$today_chicken_count);</span><br><span class="line">var_dump($chicken_condition);<span class="keyword">die</span>;</span><br></pre></td></tr></table></figure>

<h3 id="我的观点（本文最核心的地方）"><a href="#我的观点（本文最核心的地方）" class="headerlink" title="我的观点（本文最核心的地方）"></a>我的观点（本文最核心的地方）</h3><p>策略模式最重要的是定义好要对什么<strong>地方</strong>做<strong>策略</strong></p>
<p>比如：每天的<strong>某个小时</strong>提醒自己<strong>喝水</strong>，后台可能有<strong>n种方法</strong>去判断<strong>某个小时</strong>而结果只有，<strong>时间到</strong>与<strong>时间没到</strong>，中间的<strong>n种方法</strong>就是策略每个方法是一种策略</p>
<p>想明白为什么这里可以用策略模式，能得到什么好处。</p>
<p>如果用一个设计模式都不知道能带来什么的话~</p>
<p>还是别用了吧……</p>
]]></content>
  </entry>
  <entry>
    <title>排查问题的方法 如swoole线程内部报错</title>
    <url>/2021/11/29/%E6%8E%92%E6%9F%A5swoole%E7%AD%89%E5%B8%B8%E9%A9%BB%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>yum install valgrind -y</p>
<p>USE_ZEND_ALLOC=0 valgrind COMMAND</p>
</blockquote>
<p>这个东西可以查看内存级的一些信息，比如执行c语言里的那些方法，便于排查一些应用级不会显示的错误</p>
]]></content>
      <tags>
        <tag>swoole 内存 线程 进程 linux 排查</tag>
      </tags>
  </entry>
  <entry>
    <title>一个消息推送平台的架构</title>
    <url>/2021/11/29/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<p>app:</p>
<p>1.链接-定时刷新/socket方案/友盟信鸽之类的第三方</p>
<p>2.通知-后台存活的情况下推送消息</p>
<p>3.记录-记录所有的汇报，保存在数据库中，每次app打开的时候提示</p>
<p>4.图表-用图显示汇报</p>
<p>server:</p>
<p>1.存储记录</p>
<p>2.转发信息</p>
<p>3.被动收集信息</p>
<p>4.主动收集信息</p>
<p>延伸：某些记录过多则报异常-根据异常等级 通知</p>
<p>sdk:</p>
<p>1.发送信息到server</p>
<p>server:</p>
<p>记录表</p>
<p>Id，类型，产生时间，标题，内容，来自哪里</p>
<p>服务端：</p>
<p>sdk:</p>
<p>推送消息，需要各种message类。</p>
<p>iOS端：</p>
<p>sdk：</p>
<blockquote>
<p>信息包括</p>
</blockquote>
<p>每小时多少条各种类型的数据</p>
<p>当前n分钟内，那种类型的数据最多</p>
<p>每个类型的数据，每小时条数表格</p>
<p>警告级别的数据展示</p>
]]></content>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>破解&quot;阅读全文&quot;</title>
    <url>/2021/11/29/%E7%A0%B4%E8%A7%A3%22%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87%22/</url>
    <content><![CDATA[<blockquote>
<p>第一步</p>
</blockquote>
<p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-05-12-121019.png?x-oss-process=style/shuiyin" alt="image-20200512201017890"></p>
<a id="more"></a>



<blockquote>
<p>第二步</p>
</blockquote>
<p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-05-12-121100.png?x-oss-process=style/shuiyin" alt="image-20200512201100417"></p>
<blockquote>
<p>第三步</p>
</blockquote>
<p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-05-12-121357.png?x-oss-process=style/shuiyin" alt="image-20200512201357102"></p>
<blockquote>
<p>第四步</p>
</blockquote>
<p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-05-12-121454.png?x-oss-process=style/shuiyin" alt="image-20200512201454257"></p>
<blockquote>
<p>Over</p>
</blockquote>
<blockquote>
<p>扩展</p>
</blockquote>
<p>其核心在于找到文章的整个大页面</p>
<p><img data-src="https://nekoya.oss-cn-beijing.aliyuncs.com/blog/2020-05-12-122022.png?x-oss-process=style/shuiyin" alt="image-20200512202022094"></p>
<p>比如csdn的在这</p>
]]></content>
  </entry>
  <entry>
    <title>配置Xcode在build时先去git pull项目的最新代码 然后 构建cocos create项目，在build</title>
    <url>/2021/11/29/%E9%85%8D%E7%BD%AEXcode%E5%9C%A8build%E6%97%B6cocos%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="配置Xcode在build时先去git-pull项目的最新代码-然后-构建cocos-create项目，在build"><a href="#配置Xcode在build时先去git-pull项目的最新代码-然后-构建cocos-create项目，在build" class="headerlink" title="配置Xcode在build时先去git pull项目的最新代码 然后 构建cocos create项目，在build"></a>配置Xcode在build时先去git pull项目的最新代码 然后 构建cocos create项目，在build</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取最新代码</span></span><br><span class="line">git -C 项目绝对路径 pull</span><br><span class="line"><span class="comment"># 构建而不编译项目</span></span><br><span class="line">/Applications/CocosCreator.app/Contents/MacOS/CocosCreator --path 项目绝对路径 --build <span class="string">"platform=ios;autoCompile=false;"</span></span><br></pre></td></tr></table></figure>

<p>资料:<a href="https://docs.cocos.com/creator/manual/zh/publish/publish-in-command-line.html" target="_blank" rel="noopener">https://docs.cocos.com/creator/manual/zh/publish/publish-in-command-line.html</a></p>
]]></content>
      <tags>
        <tag>ios</tag>
      </tags>
  </entry>
</search>
